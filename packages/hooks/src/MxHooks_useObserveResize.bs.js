// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_math from "rescript/lib/es6/js_math.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Webapi__Dom__Element from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__Element.bs.js";
import * as MxWebapi__SingleResizeObserver from "@mxcins/webapi/src/single-resize-observer/MxWebapi__SingleResizeObserver.bs.js";

function useObserveResize(target, onResize, disabled) {
  var sizeRef = React.useRef({
        width: -1,
        height: -1,
        offsetWidth: -1,
        offsetHeight: -1
      });
  var onResizeRef = React.useRef(onResize);
  var onObserverResizeCallback = React.useCallback(function (entry) {
        var target = entry.target;
        var rect = target.getBoundingClientRect();
        var width = rect.width;
        var height = rect.height;
        var offsetWidth = Belt_Option.getWithDefault(Belt_Option.map(Webapi__Dom__Element.asHtmlElement(target), (function (ele) {
                    return ele.offsetWidth;
                  })), 0);
        var offsetHeight = Belt_Option.getWithDefault(Belt_Option.map(Webapi__Dom__Element.asHtmlElement(target), (function (ele) {
                    return ele.offsetHeight;
                  })), 0);
        var fixedWidth = Js_math.floor_int(width);
        var fixedHeight = Js_math.floor_int(height);
        if (!(sizeRef.current.width !== fixedWidth || sizeRef.current.height !== fixedHeight || sizeRef.current.offsetWidth !== offsetWidth || sizeRef.current.offsetHeight !== offsetHeight)) {
          return ;
        }
        var size = {
          width: fixedWidth,
          height: fixedHeight,
          offsetWidth: offsetWidth,
          offsetHeight: offsetHeight
        };
        sizeRef.current = size;
        var onResizeCallback = onResizeRef.current;
        if (onResizeCallback !== undefined) {
          Promise.resolve(undefined).then(function (param) {
                Curry._2(onResizeCallback, target, size);
                return Promise.resolve(undefined);
              });
          return ;
        }
        
      });
  React.useEffect((function () {
          var match = Belt_Option.getWithDefault(disabled, false);
          if (!(target == null) && !match) {
            MxWebapi__SingleResizeObserver.observe(target, onObserverResizeCallback);
          }
          return (function (param) {
                    if (!(target == null)) {
                      return MxWebapi__SingleResizeObserver.unobserve(target, onObserverResizeCallback);
                    }
                    
                  });
        }), [
        target,
        disabled
      ]);
  
}

export {
  useObserveResize ,
  
}
/* react Not a pure module */
