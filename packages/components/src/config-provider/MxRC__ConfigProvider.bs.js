// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Twind from "twind";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as MxRC__Libs__Twind from "../_libs/MxRC__Libs__Twind.bs.js";
import * as Webapi__Dom__Document from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__Document.bs.js";

function getPartalContainer(param) {
  var id = "__mx_partial_root";
  var exist = document.querySelector("#__mx_partial_root");
  var exist$1 = (exist == null) ? undefined : Caml_option.some(exist);
  if (!Belt_Option.isNone(exist$1)) {
    return exist$1;
  }
  var container = document.createElement("div");
  container.id = id;
  Belt_Option.forEach(Webapi__Dom__Document.asHtmlDocument(document), (function ($$document) {
          return Belt_Option.forEach(Caml_option.nullable_to_opt($$document.body), (function (body) {
                        body.appendChild(container);
                        
                      }));
        }));
  return container;
}

var context = React.createContext({
      size: "default"
    });

function make(size) {
  return {
          size: size
        };
}

function useSizeConfig(size) {
  var ctx = React.useContext(context);
  return React.useMemo((function () {
                return Belt_Option.getWithDefault(size, ctx.size);
              }), [
              size,
              ctx.size
            ]);
}

var provider = context.Provider;

function MxRC__ConfigProvider$ConfigContext$Provider(Props) {
  var value = Props.value;
  var children = Props.children;
  return React.createElement(provider, {
              value: value,
              children: children
            });
}

var Provider = {
  provider: provider,
  make: MxRC__ConfigProvider$ConfigContext$Provider
};

var ConfigContext = {
  getPartalContainer: getPartalContainer,
  context: context,
  make: make,
  useSizeConfig: useSizeConfig,
  Provider: Provider
};

function setup(param) {
  Twind.setup(MxRC__Libs__Twind.conf);
  
}

function MxRC__ConfigProvider(Props) {
  var sizeOpt = Props.size;
  var childrenOpt = Props.children;
  var size = sizeOpt !== undefined ? sizeOpt : "default";
  var children = childrenOpt !== undefined ? Caml_option.valFromOption(childrenOpt) : null;
  var value = React.useMemo((function () {
          return {
                  size: size
                };
        }), [size]);
  return React.createElement(React.Fragment, undefined, React.createElement(MxRC__ConfigProvider$ConfigContext$Provider, {
                  value: value,
                  children: children
                }));
}

var make$1 = MxRC__ConfigProvider;

export {
  ConfigContext ,
  setup ,
  make$1 as make,
  
}
/* context Not a pure module */
