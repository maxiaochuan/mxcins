// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Twind from "twind";
import * as MxRC_React from "./libs/MxRC_React.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as MxRC__ConfigProvider from "./MxRC__ConfigProvider.js";

var regexp = /^[\u4e00-\u9fa5]{2}$/;

function isTwoCNChar(str) {
  return regexp.test(str);
}

var init = "\n    relative\n    inline\n    font-normal\n    text(base center text)\n    whitespace-nowrap\n    border(1 gray-300)\n    rounded\n    px-3\n    transition\n  ";

var disabled = "\n    disabled:cursor-not-allowed\n    disabled:text(gray-400 hover:gray-400 focus:gray-400 active:gray-400)\n    disabled:bg(gray-100 hover:gray-100 focus:gray-100 active:gray-100)\n    disabled:border(gray-300 hover:gray-300 focus:gray-300 active:gray-300)\n  ";

var primary = "primary hover:primary-hover focus:primary-hover active:primary-active";

var danger = "danger hover:danger-hover focus:danger-hover active:danger-active";

var link = "link hover:link-hover focus:link-hover active:link-active";

var initial = "initial hover:initial focus:initial active:initial";

var transparent = "transparent hover:transparent focus:transparent active:transparent";

var def = "text(" + primary + ") text-text border(" + primary + ") border-gray-300";

var text = "\n    border-none\n    bg(initial hover:(black opacity-[0.018]) focus:(black opacity-[0.018]) active:(black opacity-[0.028]))\n    disabled:bg(initial hover:initial focus:initial active:initial)\n  ";

function make(className, size, _type, isDanger, isGhost, block, param) {
  var classes = [
    init,
    disabled
  ];
  var colors = _type === "text" ? (
      isDanger ? [
          text,
          "text(" + danger + ")"
        ] : [text]
    ) : (
      _type === "primary" ? (
          isDanger ? [
              "text-white",
              "bg(" + danger + ")",
              "border(" + danger + ")"
            ] : [
              "text-white",
              "bg(" + primary + ")",
              "border(" + primary + ")"
            ]
        ) : (
          _type === "default" ? (
              isDanger ? [
                  "text(" + danger + ")",
                  "border(" + danger + ")"
                ] : [def]
            ) : (
              _type === "dashed" ? (
                  isDanger ? [
                      def,
                      "border-dashed",
                      "text(" + danger + ")",
                      "border(" + danger + ")"
                    ] : [
                      def,
                      "border-dashed"
                    ]
                ) : (
                  isDanger ? [
                      "text(" + danger + ")",
                      "bg(" + initial + ")",
                      "disabled:bg(" + initial + ")",
                      "border-none"
                    ] : [
                      "text(" + link + ")",
                      "bg(" + initial + ")",
                      "disabled:bg(" + initial + ")",
                      "border-none"
                    ]
                )
            )
        )
    );
  classes = classes.concat(colors);
  if (block) {
    classes.push("w-full");
  }
  if (isGhost) {
    var background = "bg(" + transparent + ")";
    var disabled$1 = "disabled:bg(" + transparent + ")";
    classes = _type === "text" || _type === "link" ? classes : (
        _type === "primary" ? (
            isDanger ? classes.concat([
                    background,
                    "text(" + danger + ")"
                  ]) : classes.concat([
                    background,
                    "text(" + primary + ")"
                  ])
          ) : classes.concat(["text-white border-white"])
      );
    classes.push(disabled$1);
  }
  if (size === "small") {
    classes.push("h-6 py-0");
  } else if (size === "default") {
    classes.push("h-8 py-[4px]");
  } else {
    classes.push("text-lg h-10 py-[7px]");
  }
  var match = Twind.tw(Twind.apply(classes));
  if (className !== undefined) {
    return match + " " + className;
  } else {
    return match;
  }
}

var Twind$1 = {
  init: init,
  disabled: disabled,
  primary: primary,
  danger: danger,
  link: link,
  initial: initial,
  transparent: transparent,
  def: def,
  text: text,
  make: make
};

var make$1 = React.forwardRef(function (Props, param) {
      var partial_arg = Props.onClick;
      var partial_arg$1 = Props.children;
      var partial_arg$2 = Props.ghost;
      var partial_arg$3 = Props.disabled;
      var partial_arg$4 = Props.block;
      var partial_arg$5 = Props.danger;
      var partial_arg$6 = Props.size;
      var partial_arg$7 = Props.type;
      var partial_arg$8 = Props.style;
      var partial_arg$9 = Props.className;
      var _type = partial_arg$7 !== undefined ? partial_arg$7 : "default";
      var danger = partial_arg$5 !== undefined ? partial_arg$5 : false;
      var block = partial_arg$4 !== undefined ? partial_arg$4 : false;
      var disabled = partial_arg$3 !== undefined ? partial_arg$3 : false;
      var ghost = partial_arg$2 !== undefined ? partial_arg$2 : false;
      var context = React.useContext(MxRC__ConfigProvider.ConfigContext.ctx);
      var size = Belt_Option.getWithDefault(partial_arg$6, context.size);
      var className = make(partial_arg$9, size, _type, danger, ghost, block, disabled);
      var style = Belt_Option.getWithDefault(partial_arg$8, {});
      var onClick = function (evt) {
        if (partial_arg !== undefined && !disabled) {
          evt.preventDefault();
          Curry._1(partial_arg, evt);
          return ;
        }
        
      };
      var rendered = React.Children.map(Belt_Option.getWithDefault(partial_arg$1, null), (function (child) {
              if (!(MxRC_React.Children.isString(child) || MxRC_React.Children.isNumber(child))) {
                return child;
              }
              if (!(MxRC_React.Children.isString(child) && regexp.test(child))) {
                return React.createElement("span", undefined, child);
              }
              var string = child.split("").join(" ");
              return React.createElement("span", undefined, string);
            }));
      var tmp = {
        className: className,
        style: style,
        disabled: disabled,
        onClick: onClick
      };
      var tmp$1 = Belt_Option.map((param == null) ? undefined : Caml_option.some(param), (function (prim) {
              return prim;
            }));
      if (tmp$1 !== undefined) {
        tmp.ref = Caml_option.valFromOption(tmp$1);
      }
      return React.createElement("button", tmp, rendered);
    });

export {
  regexp ,
  isTwoCNChar ,
  Twind$1 as Twind,
  make$1 as make,
  
}
/* make Not a pure module */
