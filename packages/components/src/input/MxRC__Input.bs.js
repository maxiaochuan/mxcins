// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Twind from "twind";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as MxRC__Input__Group from "./MxRC__Input__Group.bs.js";
import * as MxRC__ConfigProvider from "../config-provider/MxRC__ConfigProvider.bs.js";

var init = "\n    inline-block\n    relative\n    m-0\n    min-w-0\n    w-full\n    overflow-visible\n    text(sm text)\n    border(1 solid border)\n    hover:(border-primary-hover)\n    focus:(border-primary-hover shadow-input-focus)\n    transition\n    tabular-nums\n    rounded\n  ";

function make(className, size, inGroup) {
  var classes = [init];
  if (inGroup) {
    classes.push("z-1");
  }
  classes.push(size === "small" ? "h-6 px-2-bordered" : (
          size === "default" ? "h-8 px-3-bordered" : "h-10 px-3-bordered text-base"
        ));
  var match = Twind.tw(Twind.apply(classes));
  if (className !== undefined) {
    return [
              match,
              className
            ].join(" ");
  } else {
    return match;
  }
}

var InputTwind = {
  init: init,
  make: make
};

function MxRC__Input(Props) {
  var size = Props.size;
  var className = Props.className;
  var style = Props.style;
  var placeholder = Props.placeholder;
  var addonBefore = Props.addonBefore;
  var addonAfter = Props.addonAfter;
  var context = React.useContext(MxRC__ConfigProvider.ConfigContext.ctx);
  var size$1 = Belt_Option.getWithDefault(size, context.size);
  var inGroup = Belt_Option.isSome(addonBefore) || Belt_Option.isSome(addonAfter);
  var className$1 = make(className, size$1, inGroup);
  var tmp = {
    className: className$1,
    type: "text"
  };
  if (style !== undefined) {
    tmp.style = Caml_option.valFromOption(style);
  }
  if (placeholder !== undefined) {
    tmp.placeholder = Caml_option.valFromOption(placeholder);
  }
  var child = React.createElement("input", tmp);
  if (!inGroup) {
    return child;
  }
  var before = addonBefore !== undefined ? React.createElement(MxRC__Input__Group.InputGroupAddon.make, {
          children: Caml_option.valFromOption(addonBefore)
        }) : null;
  var after = addonAfter !== undefined ? React.createElement(MxRC__Input__Group.InputGroupAddon.make, {
          children: Caml_option.valFromOption(addonAfter)
        }) : null;
  return React.createElement(MxRC__Input__Group.make, {
              children: null
            }, before, child, after);
}

var InputGroup;

var make$1 = MxRC__Input;

export {
  InputTwind ,
  InputGroup ,
  make$1 as make,
  
}
/* react Not a pure module */
