// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Twind from "twind";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

var init = "inline-flex";

function make(className, size, direction, align, wrap) {
  var classes = [init];
  classes.push(direction === "horizontal" ? "flex-row" : "flex-col");
  classes.push(align === "start" ? "items-start" : (
          align === "center" ? "items-center" : (
              align === "baseline" ? "items-baseline" : "items-end"
            )
        ));
  classes.push(size === "small" ? "gap-1" : (
          size === "default" ? "gap-2" : "gap-4"
        ));
  if (wrap) {
    classes.push(direction === "horizontal" ? "flex-wrap" : "");
  }
  var match = Twind.tw(Twind.apply(classes));
  if (className !== undefined) {
    return [
              match,
              className
            ].join(" ");
  } else {
    return match;
  }
}

var SpaceTwind = {
  init: init,
  make: make
};

function MxRC__Space(Props) {
  var className = Props.className;
  var style = Props.style;
  var directionOpt = Props.direction;
  var alignOpt = Props.align;
  var wrapOpt = Props.wrap;
  var sizeOpt = Props.size;
  var split = Props.split;
  var childrenOpt = Props.children;
  var direction = directionOpt !== undefined ? directionOpt : "horizontal";
  var align = alignOpt !== undefined ? alignOpt : "center";
  var wrap = wrapOpt !== undefined ? wrapOpt : false;
  var size = sizeOpt !== undefined ? sizeOpt : "default";
  var children = childrenOpt !== undefined ? Caml_option.valFromOption(childrenOpt) : null;
  var children$1 = React.Children.toArray(children);
  var max = children$1.length - 1 | 0;
  var className$1 = make(className, size, direction, align, wrap);
  var children$2 = children$1.map(function (child, i) {
        var isLast = i === max;
        var key = "space-" + i.toString();
        var child$1 = React.createElement("div", {
              key: key
            }, child);
        if (isLast) {
          return child$1;
        }
        if (split === undefined) {
          return child$1;
        }
        var key$1 = "space-split-" + i.toString();
        return [
                child$1,
                React.createElement("div", {
                      key: key$1
                    }, Caml_option.valFromOption(split))
              ];
      });
  var tmp = {
    className: className$1
  };
  if (style !== undefined) {
    tmp.style = Caml_option.valFromOption(style);
  }
  return React.createElement("div", tmp, children$2);
}

var make$1 = MxRC__Space;

export {
  SpaceTwind ,
  make$1 as make,
  
}
/* react Not a pure module */
