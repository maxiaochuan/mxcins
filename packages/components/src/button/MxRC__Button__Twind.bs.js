// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Twind from "twind";
import * as Css from "twind/css";

var init = "\n    relative\n    inline-block\n    font-normal\n    whitespace-nowrap\n    text(sm center text)\n    border(1 solid border)\n    rounded\n    px-4-bordered\n    transition\n  ";

var disabled = "\n    disabled:cursor-not-allowed\n    disabled:text(text-disabled hover:text-disabled focus:text-disabled active:text-disabled)\n    disabled:bg(background-disabled hover:background-disabled focus:background-disabled active:background-disabled)\n    disabled:border(border hover:border focus:border active:border)\n  ";

var colors = {
  primary: "primary hover:primary-hover focus:primary-hover active:primary-active",
  danger: "danger hover:danger-hover focus:danger-hover active:danger-active",
  link: "link hover:link-hover focus:link-hover active:link-active",
  initial: "initial hover:initial focus:initial active:initial",
  transparent: "transparent hover:transparent focus:transparent active:transparent"
};

var text = "\n    border-transparent\n    bg(initial hover:(black opacity-[0.018]) focus:(black opacity-[0.018]) active:(black opacity-[0.028]))\n    disabled:bg(initial hover:initial focus:initial active:initial)\n  ";

var block = "w-full";

function make(className, size, _type, shape, isDanger, isGhost, isBlock, param, isLoading, isIconOnly) {
  var classes = [
    init,
    disabled
  ];
  var str = _type === "link" ? (
      isDanger ? "text(" + colors.danger + ") bg(" + colors.initial + ") disabled:bg(" + colors.initial + ") border-transparent" : "text(" + colors.link + ") bg(" + colors.initial + ") disabled:bg(" + colors.initial + ") border-transparent"
    ) : (
      _type === "text" ? (
          isDanger ? text + ("text(" + colors.danger + ")") : text
        ) : (
          _type === "primary" ? (
              isDanger ? "bg(" + colors.danger + ") border(" + colors.danger + ") text-white " : "bg(" + colors.primary + ") border(" + colors.primary + ") text-white"
            ) : (
              _type === "default" ? (
                  isDanger ? "text(" + colors.danger + ") border(" + colors.danger + ")" : "text(" + colors.primary + ") border(" + colors.primary + ") text-text border-border"
                ) : (
                  _type === "dashed" ? (
                      isDanger ? "text(" + colors.danger + ") border(" + colors.danger + ") text-text border-border border-dashed" : "text(" + colors.primary + ") border(" + colors.primary + ") text-text border-border border-dashed"
                    ) : ""
                )
            )
        )
    );
  classes.push(str);
  if (isBlock) {
    classes.push(block);
  }
  if (isGhost) {
    var str$1 = _type === "link" || _type === "text" ? "" : (
        _type === "primary" ? (
            isDanger ? "bg(" + colors.transparent + ") text(" + colors.danger + ")" : "bg(" + colors.transparent + ") text(" + colors.primary + ")"
          ) : "text-white border-white"
      );
    classes.push(str$1);
    var str$2 = "disabled:bg(" + colors.transparent + ")";
    classes.push(str$2);
  }
  classes.push(size === "small" ? "h-6" : (
          size === "default" ? "h-8" : "h-10 text-base"
        ));
  classes.push(shape === "circle" ? (
          size === "small" ? "rounded-full px-0 min-w-6 max-w-6" : (
              size === "default" ? "rounded-full px-0 min-w-8 max-w-8" : "rounded-full px-0 min-w-10 max-w-10"
            )
        ) : (
          shape === "round" ? "rounded-full" : ""
        ));
  classes.push("before::(hidden absolute content-empty inset-[-1px] z-[1] bg-white opacity-30 transition transition-opacity)");
  var str$3 = Css.css({
        ">span": Twind.apply(["inline-block"])
      });
  classes.push(str$3);
  if (isIconOnly) {
    classes.push("px-0");
    var str$4 = size === "small" ? "w-6 leading-6" + Css.css({
            ".anticon": Twind.apply(["align-baseline"])
          }) : (
        size === "default" ? "w-8 leading-8 text-base" : "w-10 leading-10 text-lg"
      );
    classes.push(str$4);
  }
  if (isLoading) {
    classes.push("cursor-default before::block");
  }
  var match = Twind.tw(Twind.apply(classes));
  if (className !== undefined) {
    return [
              match,
              className
            ].join(" ");
  } else {
    return match;
  }
}

export {
  init ,
  disabled ,
  colors ,
  text ,
  block ,
  make ,
  
}
/* twind Not a pure module */
