// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Twind from "twind";
import RcMotion from "rc-motion";
import * as Css from "twind/css";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Icons from "@ant-design/icons";

var RcMotion$1 = {};

function getCollapsedWidth(param) {
  return {
          width: "0px",
          opacity: "0",
          transform: "scale(0)"
        };
}

function getRealWidth(node) {
  return {
          width: String(node.scrollWidth) + "px",
          opacity: "1",
          transform: "scale(1)"
        };
}

var make = React.forwardRef(function (Props, ref) {
      var iconOnly = Props.iconOnly;
      var style = Props.style;
      var children = Props.children;
      var className = Twind.tw(Twind.apply(iconOnly ? [
                  "transition transition-[width, opacity]",
                  Css.css({
                        ".anticon": ["pr-0 animation-none"]
                      })
                ] : [
                  "transition transition-[width, opacity]",
                  Css.css({
                        ".anticon": ["pr-1 animation-none"]
                      })
                ]));
      var style$1 = Belt_Option.getWithDefault(style, {});
      var tmp = {
        className: className,
        style: style$1
      };
      var tmp$1 = Belt_Option.map((ref == null) ? undefined : Caml_option.some(ref), (function (prim) {
              return prim;
            }));
      if (tmp$1 !== undefined) {
        tmp.ref = Caml_option.valFromOption(tmp$1);
      }
      return React.createElement("span", tmp, children);
    });

var TransitionBody = {
  make: make
};

function MxRC__Button__LoadingComponent(Props) {
  var loading = Props.loading;
  var exist = Props.exist;
  var iconOnly = Props.iconOnly;
  if (exist) {
    return React.createElement(make, {
                iconOnly: iconOnly,
                children: React.createElement(Icons.LoadingOutlined, {})
              });
  }
  var children = function (params, ref) {
    return React.createElement(make, {
                iconOnly: iconOnly,
                style: params.style,
                children: React.createElement(Icons.LoadingOutlined, {}),
                ref: ref
              });
  };
  return React.createElement(RcMotion, {
              visible: loading,
              motionName: "motion",
              removeOnLeave: true,
              onAppearStart: getCollapsedWidth,
              onAppearActive: getRealWidth,
              onEnterStart: getCollapsedWidth,
              onEnterActive: getRealWidth,
              onLeaveStart: getRealWidth,
              onLeaveActive: getCollapsedWidth,
              children: children
            });
}

var make$1 = MxRC__Button__LoadingComponent;

export {
  RcMotion$1 as RcMotion,
  getCollapsedWidth ,
  getRealWidth ,
  TransitionBody ,
  make$1 as make,
  
}
/* make Not a pure module */
