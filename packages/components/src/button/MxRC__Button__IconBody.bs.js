// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Twind from "twind";
import RcMotion from "rc-motion";
import * as Css from "twind/css";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Icons from "@ant-design/icons";

var RcMotion$1 = {};

function getCollapsedWidth(param) {
  return {
          width: "0px",
          opacity: "0",
          transform: "scale(0)"
        };
}

function getRealWidth(node) {
  return {
          width: String(node.scrollWidth) + "px",
          opacity: "1",
          transform: "scale(1)"
        };
}

var make = React.forwardRef(function (Props, ref) {
      var style = Props.style;
      var children = Props.children;
      var className = Twind.tw(Twind.apply([
                "transition transition-[width, opacity]",
                Css.css({
                      ".anticon": Twind.apply(["pr-2 animate-none"]),
                      ".anticon svg": {
                        animation: "loadingCircle 1s infinite linear"
                      }
                    })
              ]));
      var tmp = {
        className: className
      };
      var tmp$1 = Belt_Option.map((ref == null) ? undefined : Caml_option.some(ref), (function (prim) {
              return prim;
            }));
      if (tmp$1 !== undefined) {
        tmp.ref = Caml_option.valFromOption(tmp$1);
      }
      if (style !== undefined) {
        tmp.style = Caml_option.valFromOption(style);
      }
      return React.createElement("span", tmp, children);
    });

var TransitionBody = {
  make: make
};

function MxRC__Button__IconBody$MarginRightBody(Props) {
  var children = Props.children;
  var className = Twind.tw(Twind.apply(["pr-2"]));
  return React.createElement("span", {
              className: className
            }, children);
}

var MarginRightBody = {
  make: MxRC__Button__IconBody$MarginRightBody
};

function MxRC__Button__IconBody(Props) {
  var loading = Props.loading;
  var icon = Props.icon;
  var iconOnly = Props.iconOnly;
  if (iconOnly) {
    if (icon !== undefined) {
      if (loading) {
        return React.createElement(Icons.LoadingOutlined, {});
      } else {
        return Caml_option.valFromOption(icon);
      }
    } else {
      return null;
    }
  }
  if (icon !== undefined) {
    var child = loading ? React.createElement(Icons.LoadingOutlined, {}) : Caml_option.valFromOption(icon);
    return React.createElement(MxRC__Button__IconBody$MarginRightBody, {
                children: child
              });
  }
  var children = function (params, ref) {
    return React.createElement(make, {
                style: params.style,
                children: React.createElement(Icons.LoadingOutlined, {}),
                ref: ref
              });
  };
  return React.createElement(RcMotion, {
              visible: loading,
              motionName: "motion",
              removeOnLeave: true,
              onAppearStart: getCollapsedWidth,
              onAppearActive: getRealWidth,
              onEnterStart: getCollapsedWidth,
              onEnterActive: getRealWidth,
              onLeaveStart: getRealWidth,
              onLeaveActive: getCollapsedWidth,
              children: children
            });
}

var make$1 = MxRC__Button__IconBody;

export {
  RcMotion$1 as RcMotion,
  getCollapsedWidth ,
  getRealWidth ,
  TransitionBody ,
  MarginRightBody ,
  make$1 as make,
  
}
/* make Not a pure module */
