// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Twind from "twind";
import * as Css from "twind/css";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as MxRC__Libs__Utils from "../_libs/MxRC__Libs__Utils.bs.js";
import * as MxLibs__BreakpointSub from "@mxcins/webapi/src/breakpoint-sub/MxLibs__BreakpointSub.bs.js";

var init = "flex";

function make(className, wrap, justify, align, spacing) {
  var classes = [init];
  classes.push(wrap ? "flex-wrap" : "flex-nowrap");
  classes.push(justify === "spacing-between" ? "justify-spacing-between" : (
          justify === "end" ? "justify-end" : (
              justify === "start" ? "justify-start" : (
                  justify === "center" ? "justify-center" : "justify-spacing-around"
                )
            )
        ));
  classes.push(align === "start" ? "items-start" : (
          align === "center" ? "items-center" : "items-end"
        ));
  var y = spacing[1];
  var x = spacing[0];
  if (x !== 0) {
    var str = Css.css({
          "column-gap": x.toString() + "px;"
        });
    classes.push(str);
  }
  if (y !== 0) {
    var str$1 = Css.css({
          "row-gap": y.toString() + "px;"
        });
    classes.push(str$1);
  }
  var match = Twind.tw(Twind.apply(classes));
  if (className !== undefined) {
    return [
              match,
              className
            ].join(" ");
  } else {
    return match;
  }
}

var GridRowTwind = {
  init: init,
  make: make
};

function MxRC__Row(Props) {
  var className = Props.className;
  var style = Props.style;
  var wrapOpt = Props.wrap;
  var justifyOpt = Props.justify;
  var alignOpt = Props.align;
  var spacing = Props.spacing;
  var children = Props.children;
  var wrap = wrapOpt !== undefined ? wrapOpt : true;
  var justify = justifyOpt !== undefined ? justifyOpt : "start";
  var align = alignOpt !== undefined ? alignOpt : "start";
  var spacingRef = React.useRef(spacing);
  var match = React.useState(function () {
        return MxLibs__BreakpointSub.breakpoints;
      });
  var setScreens = match[1];
  React.useLayoutEffect((function () {
          var token = MxLibs__BreakpointSub.subscribe(function (screens) {
                if (MxRC__Libs__Utils.BreakpointUtils.isBreakpointRecord(spacingRef.current)) {
                  return Curry._1(setScreens, (function (param) {
                                return screens;
                              }));
                }
                
              });
          return (function (param) {
                    return MxLibs__BreakpointSub.unsubscribe(token);
                  });
        }), []);
  var spacing$1 = MxRC__Libs__Utils.BreakpointUtils.makeSpacingByBreakpoints(spacingRef.current, match[0]);
  var className$1 = make(className, wrap, justify, align, spacing$1);
  var children$1 = Belt_Option.getWithDefault(children, null);
  var tmp = {
    className: className$1
  };
  if (style !== undefined) {
    tmp.style = Caml_option.valFromOption(style);
  }
  return React.createElement("div", tmp, children$1);
}

var make$1 = MxRC__Row;

export {
  GridRowTwind ,
  make$1 as make,
  
}
/* react Not a pure module */
