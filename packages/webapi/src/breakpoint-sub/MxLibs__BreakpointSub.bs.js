// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Belt_Id from "rescript/lib/es6/belt_Id.js";
import * as Belt_Map from "rescript/lib/es6/belt_Map.js";
import * as Belt_MutableMapInt from "rescript/lib/es6/belt_MutableMapInt.js";
import * as Belt_MutableMapString from "rescript/lib/es6/belt_MutableMapString.js";

function make(param) {
  return Belt_MutableMapString.fromArray([]);
}

function set(map, query, mediaQueryList, listener) {
  return Belt_MutableMapString.set(map, query, {
              mediaQueryList: mediaQueryList,
              listener: listener
            });
}

var QueryCacheList = {
  make: make,
  set: set,
  forEach: Belt_MutableMapString.forEach,
  clear: Belt_MutableMapString.clear
};

var breakpoints = [
  "xxl",
  "xl",
  "lg",
  "md",
  "sm",
  "xs"
];

function cmp(a, b) {
  return breakpoints.indexOf(a) - breakpoints.indexOf(b) | 0;
}

var BreakpointCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });

var queries = Belt_Map.fromArray([
      [
        "xs",
        "(min-width: 0px)"
      ],
      [
        "sm",
        "(min-width: 576px)"
      ],
      [
        "md",
        "(min-width: 768px)"
      ],
      [
        "lg",
        "(min-width: 992px)"
      ],
      [
        "xl",
        "(min-width: 1200px)"
      ],
      [
        "xxl",
        "(min-width: 1600px)"
      ]
    ], BreakpointCmp);

var screens = {
  contents: Belt_Map.fromArray([
        [
          "xs",
          false
        ],
        [
          "sm",
          false
        ],
        [
          "md",
          false
        ],
        [
          "lg",
          false
        ],
        [
          "xl",
          false
        ],
        [
          "xxl",
          false
        ]
      ], BreakpointCmp)
};

var subscribers = Belt_MutableMapInt.fromArray([]);

function dispatch(subscriber) {
  return Curry._1(subscriber, Belt_Map.toArray(screens.contents).filter(function (param) {
                    return param[1] === true;
                  }).map(function (param) {
                  return param[0];
                }));
}

var cache = Belt_MutableMapString.fromArray([]);

function register(param) {
  return Belt_Map.forEach(queries, (function (breakpoint, query) {
                var listener = function (evt) {
                  var matches = evt.matches;
                  screens.contents = Belt_Map.set(screens.contents, breakpoint, matches);
                  return Belt_MutableMapInt.forEach(subscribers, (function (param, subscriber) {
                                return dispatch(subscriber);
                              }));
                };
                var mediaQueryList = window.matchMedia(query);
                mediaQueryList.addEventListener("change", listener);
                listener(mediaQueryList);
                return set(cache, query, mediaQueryList, listener);
              }));
}

function unregister(param) {
  Belt_MutableMapString.forEach(cache, (function (param, value) {
          value.mediaQueryList.addEventListener("change", value.listener);
          
        }));
  return Belt_MutableMapString.clear(cache);
}

var index = {
  contents: -1
};

function subscribe(subscriber) {
  if (Belt_MutableMapInt.isEmpty(subscribers)) {
    register(undefined);
  }
  index.contents = index.contents + 1 | 0;
  Belt_MutableMapInt.set(subscribers, index.contents, subscriber);
  dispatch(subscriber);
  return index.contents;
}

function unsubscribe(id) {
  Belt_MutableMapInt.remove(subscribers, id);
  if (Belt_MutableMapInt.isEmpty(subscribers)) {
    return unregister(undefined);
  }
  
}

var BreakpointPubSub = {
  breakpoints: breakpoints,
  BreakpointCmp: BreakpointCmp,
  queries: queries,
  screens: screens,
  subscribers: subscribers,
  dispatch: dispatch,
  cache: cache,
  register: register,
  unregister: unregister,
  subscribe: subscribe,
  unsubscribe: unsubscribe
};

var subscribe$1 = subscribe;

var unsubscribe$1 = unsubscribe;

export {
  QueryCacheList ,
  BreakpointPubSub ,
  breakpoints ,
  subscribe$1 as subscribe,
  unsubscribe$1 as unsubscribe,
  
}
/* BreakpointCmp Not a pure module */
