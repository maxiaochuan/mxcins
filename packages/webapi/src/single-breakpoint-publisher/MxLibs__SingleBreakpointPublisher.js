// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Belt_Id from "rescript/lib/es6/belt_Id.js";
import * as Belt_Map from "rescript/lib/es6/belt_Map.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_MutableMapInt from "rescript/lib/es6/belt_MutableMapInt.js";
import * as Belt_MutableMapString from "rescript/lib/es6/belt_MutableMapString.js";

var breakpoints = [
  "xxl",
  "xl",
  "lg",
  "md",
  "sm",
  "xs"
];

var screen = {
  contents: undefined
};

var store = Belt_MutableMapString.fromArray([]);

function cmp(a, b) {
  return breakpoints.indexOf(a) - breakpoints.indexOf(b) | 0;
}

var BreakpointCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });

var queries = Belt_Map.fromArray([
      [
        "xs",
        "(max-width: 575px)"
      ],
      [
        "sm",
        "(min-width: 576px)"
      ],
      [
        "md",
        "(min-width: 768px)"
      ],
      [
        "lg",
        "(min-width: 992px)"
      ],
      [
        "xl",
        "(min-width: 1200px)"
      ],
      [
        "xxl",
        "(min-width: 1600px)"
      ]
    ], BreakpointCmp);

function dispatch(fn) {
  return Belt_Option.forEach(screen.contents, fn);
}

function register(onchange) {
  return Belt_Map.forEach(queries, (function (breakpoint, query) {
                var handler = function (evt) {
                  var matches = evt.matches;
                  if (matches) {
                    screen.contents = breakpoint;
                    return Curry._1(onchange, breakpoint);
                  }
                  
                };
                var mediaQueryList = window.matchMedia(query);
                mediaQueryList.addEventListener("change", handler);
                handler(mediaQueryList);
                return Belt_MutableMapString.set(store, query, {
                            mediaQueryList: mediaQueryList,
                            handler: handler
                          });
              }));
}

function unregister(param) {
  return Belt_Map.forEach(queries, (function (param, query) {
                return Belt_Option.forEach(Belt_MutableMapString.get(store, query), (function (cached) {
                              cached.mediaQueryList.addEventListener("change", cached.handler);
                              
                            }));
              }));
}

var QueryListDispatcher = {
  breakpoints: breakpoints,
  screen: screen,
  store: store,
  BreakpointCmp: BreakpointCmp,
  queries: queries,
  dispatch: dispatch,
  register: register,
  unregister: unregister
};

var token = {
  contents: -1
};

var subscribers = Belt_MutableMapInt.fromArray([]);

function subscribe(subscriber) {
  if (Belt_MutableMapInt.size(subscribers) === 0) {
    register(function (screen) {
          return Belt_MutableMapInt.forEach(subscribers, (function (param, fn) {
                        return Curry._1(fn, screen);
                      }));
        });
  }
  token.contents = token.contents + 1 | 0;
  Belt_MutableMapInt.set(subscribers, token.contents, subscriber);
  Belt_Option.forEach(screen.contents, subscriber);
  return token.contents;
}

function unsubscribe(id) {
  Belt_MutableMapInt.remove(subscribers, id);
  if (Belt_MutableMapInt.size(subscribers) === 0) {
    return unregister(undefined);
  }
  
}

export {
  QueryListDispatcher ,
  token ,
  subscribers ,
  subscribe ,
  unsubscribe ,
  
}
/* store Not a pure module */
