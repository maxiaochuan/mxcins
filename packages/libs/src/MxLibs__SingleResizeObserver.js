// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Belt_Id from "rescript/lib/es6/belt_Id.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Belt_MutableMap from "rescript/lib/es6/belt_MutableMap.js";
import * as Belt_MutableSet from "rescript/lib/es6/belt_MutableSet.js";
import ResizeObserverPolyfill from "resize-observer-polyfill";

var cmp = Caml_obj.caml_compare;

var Id = Belt_Id.MakeComparable({
      cmp: cmp
    });

function make(param) {
  return Belt_MutableSet.make(Id);
}

function fromArray(arr) {
  return Belt_MutableSet.fromArray(arr, Id);
}

var ResizeListenerSet = {
  Id: Id,
  make: make,
  fromArray: fromArray
};

var cmp$1 = Caml_obj.caml_compare;

var Id$1 = Belt_Id.MakeComparable({
      cmp: cmp$1
    });

function make$1(param) {
  return Belt_MutableMap.make(Id$1);
}

var ElementResizeListenersMap = {
  Id: Id$1,
  make: make$1
};

var store = Belt_MutableMap.make(Id$1);

var observer = new ResizeObserverPolyfill((function (entries) {
        entries.forEach(function (entry) {
              return Belt_Option.forEach(Belt_MutableMap.get(store, entry.target), (function (listeners) {
                            return Belt_MutableSet.forEach(listeners, (function (listener) {
                                          return Curry._1(listener, entry);
                                        }));
                          }));
            });
        
      }));

function observe(element, listener) {
  var listeners = Belt_MutableMap.get(store, element);
  if (listeners !== undefined) {
    return Belt_MutableSet.add(Caml_option.valFromOption(listeners), listener);
  } else {
    return Belt_MutableMap.set(store, element, Belt_MutableSet.fromArray([listener], Id));
  }
}

function unobserve(element, listener) {
  return Belt_Option.forEach(Belt_MutableMap.get(store, element), (function (listeners) {
                Belt_MutableSet.remove(listeners, listener);
                if (Belt_MutableSet.size(listeners) === 0) {
                  observer.unobserve(element);
                  return ;
                }
                
              }));
}

var $$ResizeObserver;

export {
  $$ResizeObserver ,
  ResizeListenerSet ,
  ElementResizeListenersMap ,
  store ,
  observer ,
  observe ,
  unobserve ,
  
}
/* Id Not a pure module */
